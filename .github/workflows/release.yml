name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - target: bun-linux-x64
            os: ubuntu-latest
            artifact: aish-linux-x64
          - target: bun-linux-x64-baseline
            os: ubuntu-latest
            artifact: aish-linux-x64-baseline
          - target: bun-linux-arm64
            os: ubuntu-latest
            artifact: aish-linux-arm64

          # macOS builds
          - target: bun-darwin-x64
            os: macos-13 # Intel runner
            artifact: aish-darwin-x64
          - target: bun-darwin-arm64
            os: macos-14 # Apple Silicon runner
            artifact: aish-darwin-arm64

          # Windows builds
          - target: bun-windows-x64
            os: windows-latest
            artifact: aish-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build executable
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          bun build --compile --minify --sourcemap --target=${{ matrix.target }} --define AISH_VERSION="\"$VERSION\"" src/index.ts --outfile ${{ matrix.artifact }}
        shell: bash

      - name: Test executable
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./${{ matrix.artifact }} --version
          else
            chmod +x ${{ matrix.artifact }}
            # Only test if the binary matches the runner architecture
            if [[ "${{ matrix.target }}" == *"arm64"* ]] && [[ "$(uname -m)" != "arm64" ]]; then
              echo "Skipping test for ARM64 binary on x64 runner"
              file ${{ matrix.artifact }}
            else
              ./${{ matrix.artifact }} --version
            fi
          fi
        shell: bash

      - name: Create tarball (Unix)
        if: runner.os != 'Windows' && success()
        run: |
          if [ -f "${{ matrix.artifact }}" ]; then
            tar -czf ${{ matrix.artifact }}.tar.gz ${{ matrix.artifact }}
            if [ "$RUNNER_OS" == "macOS" ]; then
              shasum -a 256 ${{ matrix.artifact }}.tar.gz > ${{ matrix.artifact }}.tar.gz.sha256
            else
              sha256sum ${{ matrix.artifact }}.tar.gz > ${{ matrix.artifact }}.tar.gz.sha256
            fi
          else
            echo "Binary ${{ matrix.artifact }} not found, skipping tarball creation"
          fi
        shell: bash

      - name: Create zip (Windows)
        if: runner.os == 'Windows' && success()
        run: |
          if exist "${{ matrix.artifact }}" (
            7z a ${{ matrix.artifact }}.zip ${{ matrix.artifact }}
            certutil -hashfile ${{ matrix.artifact }}.zip SHA256 > ${{ matrix.artifact }}.zip.sha256
          ) else (
            echo Binary ${{ matrix.artifact }} not found, skipping zip creation
          )
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.artifact }}
          path: |
            ${{ matrix.artifact }}*
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || needs.build.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          if [ -d "artifacts" ]; then
            find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} release-assets/ \; 2>/dev/null || true
          fi
          echo "Available release assets:"
          ls -la release-assets/ || echo "No release assets found"

          # Count successful builds
          ASSET_COUNT=$(ls release-assets/*.tar.gz release-assets/*.zip 2>/dev/null | wc -l || echo 0)
          echo "Found $ASSET_COUNT binary assets"

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 What's New

          This release includes pre-compiled binaries for multiple platforms:

          ### 📦 Downloads

          **Linux:**
          - `aish-linux-x64.tar.gz` - Standard x64 build
          - `aish-linux-x64-baseline.tar.gz` - Compatible with older CPUs (pre-2013)
          - `aish-linux-arm64.tar.gz` - ARM64 build for servers like AWS Graviton

          **macOS:**
          - `aish-darwin-x64.tar.gz` - Intel Macs
          - `aish-darwin-arm64.tar.gz` - Apple Silicon Macs (M1/M2/M3)

           **Windows:**
           - `aish-windows-x64.exe.zip` - Standard x64 build
          ### 🔧 Installation

          **Quick install (recommended):**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/abhishekbhardwaj/aish-cli/main/scripts/install.sh | bash
          ```

          **Manual installation:**
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Make executable (Unix): `chmod +x aish`
          4. Move to PATH: `mv aish /usr/local/bin/`

          ### ✅ Verification

          All binaries include SHA256 checksums for verification:
          ```bash
          sha256sum -c aish-*.sha256
          ```

          ### 🔐 Security

          - All binaries are built in GitHub Actions for transparency
          - SHA256 checksums provided for verification
          EOF

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
